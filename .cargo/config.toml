[unstable]
# compile core, builtin stuff and alloc for each target on demand
# does not link to staticlib since need rlib. Can keep for future implementations, e.g. x86
# build-std = ["core", "compiler_builtins", "alloc"]
# need this for memcpy and stuff
# build-std-features = ["compiler-builtins-mem"]

[alias]
barm = "rustc --target=aarch64-none-elf --release -- --crate-type=staticlib -o build/.a"
brv = "rustc --target=riscv64gc-unknown-none-elf --release -- --crate-type=staticlib -o build/.a"
bx86 = "rustc --target=x86_64-pc-windows-msvc"
# basically cargo run with cfg(feature = "arctest") on since we specify our own test runner
btrv = "rustc --features arctest --target=riscv64gc-unknown-none-elf -- --crate-type=staticlib -o build/.a"
t = "cargo rustc --target=riscv64gc-unknown-none-elf -- --test --crate-type=staticlib -o build/.a"

# [target.test]
# when testing, can do extra stuff

[target.riscv64gc-unknown-none-elf]
runner = ["qscripts/test-riscv64.sh"]

# extra stuff for cargo build/run/test on spectro only
# [target.'cfg(target_arch = "riscv64")']
# runner = "bootimage runner"

# for crates.io. To build an executable image, use arcboot. This just builds the default spectro config as a static lib
[build]
target = "riscv64gc-unknown-none-elf"
